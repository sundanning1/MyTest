***************************************************************************************************************************************************************************
小金，能跟上吗
小金站起来，小金
小金你来回答
小金别睡觉                bs？？？？？？？？？？？？？？？？？
俊杰shi
---------------------------------------------------------------------------------------------------------------------------
》Topic（发布/订阅）
ROS中的通信方式中，topic是常用的一种。对于实时性、周期性的消息，使用topic来传输是最佳的选择。
topic是一种点对点的单向通信方式，这里的“点”指的是node，也就是说node之间可以通过topic方式来传递信息。
topic要经历下面几步的初始化过程：首先，publisher节点和subscriber节点都要到节点管理器进行注册，然后publisher会发布topic，subscriber在master的指挥下会订阅该topic，从而建立起sub-pub之间的通信。
注意整个过程是单向的。其结构示意图如下：
Subscriber接收消息会进行处理，一般这个过程叫做回调(Callback)。
所谓回调就是提前定义好了一个处理函数（写在代码中），当有消息来就会触发这个处理函数，函数会对消息进行处理。
注意整个过程是单向的。
》引用其他php文件，include ‘文件名.php’
》连接数据库：mysql_connect(HOST,USER,PASS)
》export default 是默认导出
export const 是命名导出
在一个文件中export const可以有多个，但是export default只有且仅有一个，
{}表示导入非默认变量 , 也就是说文件中不使用export default导出的变量就需要加{}，
 使用export default导出的就可以不加花括号，如果是外部引用的话，是这样：

import dea（任意） from 'demo1' //导入的时候可以给这个模块任意取名字，且不需要用花括号
----------------------------------------------------------------------------------------------------------------
2022.08.18
----------------------------------------------------------------------------------------------------------------
》测试变量是否存在
1、isset( )；测试一个变量是否存在/是否被设置（输出为null/未设置）
2、empty( );测试一个变量是否为空，但变量存在
》输出
1、echo( );直接输出内容
2、var_dump( );输出变量类型、键及值
3、printf( );格式化输出
     eg：printf('------%s-----%s-----',$a $b);
4、sprintf( );返回格式化字符串，不打印
5、print_r ( )用于打印数组
原格式输出：echo ‘<pre>’;
	    print_r ( );
	    echo ‘</pre>’;
》判断变量类型
1、gettype( );获取变量类型并返回字符串
2、精确判断：is_int( )   is_string( )  is_object( )  is_array( )
     is_scalar( );判断是否是标准类型
》变量/数组删除
unset($a);
--------------------------------------------------------------------------------------------------------------------------
2022.08.19
--------------------------------------------------------------------------------------------------------------------------
》js变量声明
1）let 
let语句声明一个块级作用域的局部变量，并可以初始化为一个值（可选）
let 允许你声明一个作用域被限制在块作用域中的变量、语句或者表达式。
语法：let name1 [= value1] [, name2 [= value2]] [, ..., nameN [= valueN];
2）const
常量是块级范围的，非常类似用 let 语句定义的变量。但常量的值是无法（通过重新赋值）改变的，也不能被重新声明。
》变量类型自动转换
1、整形--->字符串
echon $a.'!!!'--------输出为字符串
2、字符串--->整形
$a="10hgd"
echon $a+10--------输出为整形20
3、所有类型--->转布尔型su
$a=0;
$a=0.0;
$a=array();
$a=null;
$a='';
$a='0';
$a=false;
除以上七种转布尔型为false外，其余均为ture
》变量类型强制转换
（int）（string）（int）（float）（array）
eg：var_dump((int)$a)

》常量  define( )
常量一旦定义不允许再更改，而且常量名前没有$，常量名字必须是大写。
eg:define('USER','root');
     define('PASS','123');
1、输出：echo ‘my name is’.USER.'!!!!'
2、判断常量是否存在：var_dump(defined('USER')); 输出布尔型
3、预定义常量：_LINE_    当前行数
                           _FILE_   当前文件绝对路径
                           -FUNCTION_  在函数内知道函数名
                           M_PI  圆周率
》运算符：
1、一元 ++ --
$a++  先赋值后运算
++$a  先运算后赋值
注：1）$a++不等同于$a+=1
       2) 当$a是布尔型时，$a++/$a--仍等于本身
2、二元 +-*/%
1)数学运算符
+-*/%
$a/$b
$a%$b
2）赋值运算符
=、+=、-=、*=、/=、%=、.=（点连接）
eg：$str="雀巢真给力！"；
       $str.="一点都不困！！！！"; 
       输出：雀巢真给力！一点都不困！！！！
3）比较运算符（真：1 or 假：0）
<,<=,>,>=,==, !=, ===(全等于), !==（全不等于）
4）逻辑运算符（开关）（真：1 or 假：0）
&&（与）  , ||（或），！（非）
其中，与运算中if（($a=0）&&($b=6)){.....}若左边为假，右边将不执行，($a=0）($b=6)与赋值运算
或运算左边为假才运行右边程序，左边为真将不再运行右边程序
3、三元运算符（三元数）
$a?$b:$c
4、运算符优先级
1）++，-- （高） 
2)  *，/，%  
3)  >  +, - , . ,
4)   <,<=,>,>=
5)  ==, !=, ===, !==
6)  位运算符：&（将两个二进制数逐位相与） ,|（将两个二进制数逐位相或）
7) &&  , ||
8）？：
9）=、+=、-=、*=、/=、%=（低）
5
1) new 用于创建类的对象
2) @ 用于屏蔽错误与警告
3) -> 用于连接对象属性
4) => 用于赋值 连接键值
5) instanceof 判断一个对象是否是从一个类里实例化出来
------------------------------------------------------------------------------------------------------------------------------
2022.08.19
-------------------------------------------------------------------------------------------------------------------------------
》单分支结构
1、if(){.......}
      else{.........}
》多分枝结构
1、if(){......}
      elseif(){......}
      else{.......}
2、switch(){
      case 1:
           echo'zhouyi';
           break;
       case 2:
           echo'zhouer';
      }
》循环控制
1、while
2、for($i=0;$i<10;$i++){......}
》特殊流程控制
1、break 结束整个循环
2、continue 结束本次循环
3、exit( )等同die()
4、die( ) 结束页面脚本
-------------------------------------------------------------------------------------------------------------------------------
2022.08.25
-------------------------------------------------------------------------------------------------------------------------------
》函数
1、php语言结构
if() for() while() switch() array() echo() print() list() isset() unset() foreach() exit() die() include() require() empty()
判断是否是内置函数：function_exists("tab");   以上均不是内置函数
2、系统函数 
	count();  array_merge();
3、自定义函数
》变量的作用域
1、局部变量：函数里面的变量
2、全局变量：函数外面的变量
3、连接全局与局部：global $i;
4、超全局常量
1）常量
2）预定义常量
3）超全局数组   $_GET
注：   1、全局变量不能用于函数局部，局部变量不能用于全局，全局与局部可用global $i;连接。
5、静态变量（static $i;）
函数内同一变量在同名函数调用多次的情况下能够连续使用
-------------------------------------------------------------------------------------------------------------------------------------
2022.08.26
--------------------------------------------------------------------------------------------------------------------------------------
》函数参数
1、自定义参数
2、默认参数
3、回调参数：将一个函数作为参数传入
4、引用参数：$a=10;  $b=&$a;  &将$a的引用地址赋给$b
eg：  $a=10;  $b=&$a;  $b=100;   echo $a; =>100
》函数
1、变量函数
2、可变个数参数的函数
3、递归函数
4、如何提高代码重用性
5、数组定义
6、超全局数组
intval() 函数用于获取变量的整数值。 int intval ( mixed $var [, int $base = 10 ] )
intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 
intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。
----------------------------------------------------------------------------------------------------------------------------------------
2022.8.27
----------------------------------------------------------------------------------------------------------------------------------------
》变量函数
1、function show( ){ };
$var='show';
$var( );
》可变个数参数的函数
1、函数体内添加func_get_args();函数用于获取传入的不定个数数值并保存为数组格式。
eg：function show( ){ 
                $arr=func_get_args();
	echo"<pre>";
	print_r($arr);
	echo"</pre>";
        };
        show(1,2,3,4,5,6); ===>输出为数组array（[0]=>1.........）
2、函数体内添加func_num_args();函数用于获取传入的不定参数的个数并保存为整数型。
eg：function show( ){ 
                $num=func_num_args();
	echo $num;
        };
        show(1,2,3,4,5,6); ===>输出为整数 6
》递归函数：自己调用自己，一步一步进，一步一步退
eg：$n=3;
        function sum($n){ 
                static $tot; //变量在多次调用时，每次调用会被清零，加static作为静态变量后可被多次累积调用
                $tot+=$n;
	if($n>1){
                       sun($n-1);
                 }
	 return $tot;
         };
         echo  sum($n);

        $n=3;
        function sum($n){ 
                global $tot;
                $tot+=$n;
	if($n>1){
                       sun($n-1);
                 }
	 return $tot;
         };
         sum($n);
》如何提高代码重用性
1、include  若出现错误报warning不影响页面后面脚本执行
2、require  若出现错误报error 后面脚本将不再执行
》数组分类
1、索引数组
2、关联数组
3、混合数组
》数组定义 (键值对 key | value)
1、索引数组
$arr=array(1,3,5);
$arr=array(10=>1,20=>3,30=>5); //修改键
$arr[0]='a';
$arr[]='b';
$arr[]='c'; //可自动补全所缺键
2、关联数组
        $arr=array(
	'name'='xiaohua',
	'age'='18',
	'sex'='nicai',
          );
3、混合数组
        $arr=array(
	'xiaohua',
	'age'='18',
          );
》多维数组
        $arr=array(
	'name'='xiaohua',
	'age'='18',
	'sex'='nicai',
	'hobby'=array(
			eat,	
			eat,
			eat
		        )
          );
》超全局数组  不需要定义，本身就存在
1、$_SERVER  查看服务器信息
[ 'SERVER_NAME']  服务器域名
[ 'REMOTE_ADDR']  客户端ip
[ 'SERVER_ADDR']  服务器ip
[ 'SERVER_PORT']  服务器端口
[ 'DOCUMENT_ROOT']  网站根目录
[ ' SCRIPT_FLIENAME']  当前脚本的系统绝对路径
[ 'REQUEST_URI']  当前脚本的网站绝对路径
[ 'PHP_SELF']  当前脚本的网站绝对路径
2、$_GET  可用来接收a连接/表单提交信息
3、$_POST  可用来接收表单提交信息，表单提交信息时多使用post，因get 信息会在地址栏显示
4、$_REQUEST  同时可以接受get和post提交的数据 但反映速度慢
5、$_FLIES
6、$_COOKIE
7、$_SESSION
8、$GLOBALS  1.包含$_GET数据 2.包含$_POST数据 3.包含$_COOKIE数据 4.包含$_FILES数据
》查看数组内容
1、print_r(); 
2、var_dump();
注：为打印更清晰，一般加pre标签 echo'<pre>'; print_r(); echo'<pre>';
》数组遍历
1、for(){};
遍历数组不建议使用，因字符串下标或下标跨度太大
2、foreach($arr as $key=>$value){
	echo $sky."=>".$value;
}
3、list,each,while遍历    list看不到字符串下标的值,当遍历为空时返回false
eg:  $arr=array(
	'name'='xiaohua',
	'age'='18',
	'sex'='nicai',
          );
while(list($k,$v)=each($arr)){
	echo"<h2>{$k}:{$v}</h2>";
}  
=====>name:xiaohua
=====>age:20
=====>sex:nicai
---------------------------------------------------------------------------------------------------------------------------------------
2022.8.28
------------------------------------------------------------------------------------------------------------------------------------------
4、使用数组的内部指针控制函数遍历数组 next(),prev(),end(),reset()
》表单数据如何提交给php文件:（见云梦P15 后13分）
1.text数据
<input type='text' name='username ' >
2.password数据
<input type='password' name="password'>
3.radio单选数据
<label>
      <input type="radio" name="product" value="linux"> linux
</ label>
4.checkbox多选数据
<label>
     <input type="checkbox" name="love[ ]" value="football">football
</ label>
5.select下拉菜单数据
<select name="city" id="">
      <option value="bj">bj</option>
      <option value="sh">sh</option>
      <option value="ty">ty</option>
</select>
6.多选下拉菜单数据
<select name="interest[ ]" multiple size='5'>
      <option value="movie">学习</option>
      <option value="looker">学习</option>
      <option value="smalljin">学习</option>
</select>
6.textarea文本域数据
<textarea name="mess" id="" cols="30" rows="10"></textarea>
》
mt_rand(1,100)  可取1~100的任意数字
count($arr) 获取数据元素个数
strlen($val) 获取数组元素长度
》数组的键值操作函数
array_values();  获取数组中的值
array_keys();获取数组中的键
in_array();  检查一个值是否在数组中.
array_key _exists();  检查一个键是否在数组中
array_flip();  键和值对调
array_reverse();  数组中的值反转
》统计数组的元素和唯一性.
count();  统计数组的个数
array_count_values();  统计数组中值出现的次数 
array_unique();  删除数组中重复值
》使用回调参数处理数组的函数 
array_filter();  数组值过滤
array_map();  将回调函数作用到给定数组的单元上
》数组的排序函数(都会改变原数据)
sort();  按值把数组值进行排序,升序,不保留key.
rsort(); 按值把数组值进行排序,降序,不保留key 
asort();  按值把数组值进行排序,升序,保留key 
arsort(();  按值把数组值进行排序,降序,保留key.
ksort();  按键把数组值进行排序,升序,保留key・
krsort();  按键把数组值进行排序,降序,保留key.
natsort(); 按自然数排序，保留key（字符串排序）
natcasesort(();  忽略大小写的自然数排序. 
array_multisort(();  用一个数组对另外一个数组进行排序
》拆分、合并、分解与结合函数
array_slice($arr,开始键，截取个数); 截取一段值 不改变原数组
array_splice(); 截取一段值，保留一段值 改变原数据
array_combine(); 合并，第一个是key,第二个是value 
array_merge();=join(); 并集 合并，若键相同，后面覆盖前面 join（$arr,' '）;用空格连接
implode(); 把数组连接成字符串 
explode(‘-'，$arr); 把字符串分解成数组
------------------------------------------------------------------------------------------------------------------------------------------
2022.8.29
------------------------------------------------------------------------------------------------------------------------------------------
》数组与数据结构（改变原数组）
array_pop(); 把数组最后一个值弹出，返回弹出值
array_push(); 从数组最后压入一个值，返回新数组个数 
array_shift();  从数组最前面弹出一个值,返回移出值,原数组下标重排
array_unshift();  从最前面插入一个值,返回新数组个数
 》其他有用的数组处理函数 
array_rand();  随机取一个key 
shuffle();  打乱数组
array_sum();  数组所有值的和 
array_product();  数组所有值的乘积 
range();  自动生成一个范围内的数组（0，9）、（a，z）、（A,Z）
》字符串输出
$str='hello world';
echo '<h2>'.$str.'</h2>';
echo "<h2>{$str}</h2>";
print "<h2>{$str}</h2>";
printf('<h2>%s</h2>',$str);
echo sprintf('<h2>----%s------</h2>',$str); %d 整型 %f 浮点数
》字符串连接符  (点)
‘------’.$arr.'..........'
》去除空格和字符串填补函数
ltrim() 去除字符串左侧空格
rtrim() 去除字符串右侧空格
trim() 去除字符串左右两侧空格
str_pad($str,10,'-'，STR_PAD_LEFT); 使用另一个字符串在原字符串左侧填充已达到指定长度
注：STR_PAD_RIGHT 右侧  STR_PAD_BOTH  两侧
str_repeat($arr,100) 将字符串重复出现100次
-----------------------------------------------------------------------------------------------------------------------
8:14 2022/8/30
-----------------------------------------------------------------------------------------------------------------------
》字符串大小写转换函数
strtolower() 
strtoupper()
ucfirst() 字符串首字母大写
ucwords() 每个单词首字母大写
》与htm1标签相关联的字符串函数
nl2br() 把其他语言换行符转换为br标签
htmlspecialchars() 将字符串中HTML代码转为实体
htmlspecialchars_decode() 解实体 将实体转为HTML代码
strip_tags() 去掉字符串中HTML代码标签
addslashes() 在‘或"前加 / 避免’“的特殊性
eg：增加sql语句安全性$info=addslashes(htmlspecialchars($_POST['info'])）p21
stripslashes() 去除字符串中的 / 
》其他字符串格式化函数
strrev() 将字符串翻转顺序
strlen() 
number_format() 数据格式化 每几个用特定符号隔开
md5() 对数据加密为32位密码
str_shuffle() 打乱字符串 
》字符串的截取 substr()
substr(str_shuffle($arr),0,4)从$arr中从0开始截取4个
》字符串的分割与拼接
explode()
implode()
join()
》字符串的查找
strpos() 查找指定字符串第一次出现位置
strrpos($str, 'w ') 查找指定字符串w最后一次出现位置
》字符串的替换
str_replace(原字符串，替换字符串，$arr)
》支持多字节文字
mb_substr($str,0,4 ,"utf-8");从0开始只显示4个
$str='我是大金，我是好人!';
echo "<a href='javacript : ' title='{$str} ' >".mb_substr($str,0,4)."...</a>";
=====》我是大金...
mb_strpos();
mb_strrpos();
mb_strstr();
mb_strtoupper();
mb_strtolower();
》路径处理函数
dirname(); 截取路径中的目录部分
basename(); 截取路径中的文件部分
pathinfo(); 将路径解析成各部分
parse_url(); 
parse_str()；
---------------------------------------------------------------------------------------------------------------------------------
12:43 2022/8/31
------------------------------------------------------------------------------------------------------------------------------------
》正则的使用场景:
》正则匹配
1.检查手机格式    /^\d{11}$/
2.检查邮箱格式    /^\w+@\w+\.\w+$/
3.检查手机是否是以139开头    /^139\d{8}$/
4.复杂的字符串替换环境    /(\d+)\-(\d+)\+( \d+)/
》正则表达式
1、原子
>点：可代表任一字符处理除了换行
注：i 模式修正符可忽略大小写   U贪婪模式（最小化匹配）
eg：$str="php and pap and pbp and linux is lamp and linux and PHP";
$ptn='/p.p/i';
preg_match_all($ptn,$str,$mt);
echo "<pre>"; 
print r($mt); 
echo "</pre>"; ==============》输出包括PHP
a-z，A-Z,0-9,:其中的任意一个
(abc),将abc作为一个整体做匹配  （adb）|(djh) 或
[0-9]0-9其中的任意一个  [^0-9],除了0-9外的任意一个
 \w 匹配任意一个字符（字母、数字、下划线）\W 匹配任意一个字符除了字母、数字、下划线
\s 特指空格 \S 匹配非空格  \w 匹配任意一个字符  \d 匹配任一数字 \D 匹配任意个非数字
2、元子符
*   +    ？  |   \b词边界（空格、逗号....）  \B非词边界   [^](取反)  {m}m个, {m,n}m到n个, {m,}m个以上,
()・ \d*一个或多个或0个数字  \d+一个或多个数字  \d?一个或0个数字・  *任意一个字符(0、1、多个)
^以什么开始  $以什么结尾
 》正则函数
1、preg_grep() 在数组中搜索包含指定值的元素
2、preg_match(需要匹配的正则，原字符串，匹配到的内容需要存入的字符串) 当匹配到第一个字符串时即停止
3、preg_match_all(需要匹配的正则，原字符串，匹配到的内容需要存入的字符串) 匹配所有字符串
4、preg_replace();
5、preg_split();正则分割
eg：$str="2014-10=20+30/50";
$arr=preg_split('/-l=|\+///' ,$str);
》向后引用:(abc)$1\\1
》模式修正符:
I 或
i #忽略大小写
U#贪婪模式(最小化匹配)m#把\n视为多行
》数学函数
max(1,2,10); 最大值
//min() 最小值
max(array(2,3,210));
//min()
round() 四舍五入
ceil() 向上取整
floor() 向下取整
mt_rand(a，b) 求a-b内随机数 默认20亿
》日期函数
time()时间戳  
strtotime();将字符串转为时间戳
date(); echo date( 'Y-m-d H:i:s',0);
》date格式化参数:
Y:2013年             m:61-12月
n:1-12月              d:01-31天
j:1-31天               H:24时
h: 12时               i:20-59分
s:00-59秒            w:日-六周
microtime（）微秒 microtime（true）保留到一位微秒   
A:AM或PM           a:am或pm
L;是否闰年           t:某月天数

-----------------------------------------------------mysql数据库------------------------------------------------------------
12:13 2022/9/1
》数据库服务器
1、数据库
2、数据表
      表结构（字段）
      表数据（记录）
      表索引（加快检索）
》表引擎 myisam   innodb
》Mysql基本命令:
1.net stop mysql 关闭mysql
2.net start mysql 开启mysq1
3.mysql -uroot -p123  登录mysq1
4.show databases; 查看数据库
5.use test 切换到test数据库
6.show tables; 查看所有表
7.select * from t1; 查看t1表中数据
8.desc t1; 查看t1表列结构
9.exit 退出mysq1客户端
》数据库操作:
1.创建数据库
create database jiuxian;
2.删除数据库
drop database jiuxian;
》表操作:
1.创建表
create table user(id,int,
                 name,char);
2.删除表
drop table user;
3.修改表
》数据操作
1.插入数据
insert into user(id,username,password) values(1,'user1',20)
2.删除数据
delete from user where id=1;
3.查看数据
select * from user;
4.修改数据
update user set age=30 where id=2;
》PHP的错误处理:
1.错误报告级别
2.调整错误报告级别
设置是否报错:
display_errors = On
报错级别:
E ALL #所有报错 
E NOTICE #提示报错 
E DEPRECATED #未来弃用报错 
E WARNING #警告报错 
E ERROR #致命报错 
E PARSE #语法报错 
控制报错级别:
E ALL &~E NOTICE &~E STRICT &~EDEPRECATED

》数值类型:
tinyint(4)有符号#-127<=数值<=127
tinyint(3)无符号#o<=数值<=255
int(11)有符号#-2147483648<=数值<=2147483648
int(10)无符号#0<=数值<=4294967296
bigint(20）有符号#9223372036854775808<=数值<=9223372036854775807
bigint(19)无符号#o<=数值<=18446744073709551615
字符串类型:
char( 255)#长度<=255 定长
varchar(65535)#长度<=255 不定长
text#255<长度<=65535
mediumtext #65535<长度<=16777216longtext #16777216<长度<=4294967296

》char和varchar区别:
1.char最长255，varchar最长65535
2.char固定长度空间，varchar可变长度空间修改数据库字符集:
\s 检测mysql服务器信息  \c 停止 中断
数据库不支持中文时，可修改utf8
Server characterset: utf8
Db haracterset: utf8
Client characterset: utf8
Conn. characterset: utf8
编辑mysql配置文件:my.ini
[client]
default-character-set = utf8
[wampmysqld]
character-set-server = utf8
collation-server = utf8_general_ci

》数据字段属性:
1.unsigned 无符号数据
2.zerofi11(默认会设置无符号)
3.auto_increment(前提是必须设置主键)
4.null
5.not null
6.default 设置默认值
主键自增：
mysql> create table t5(
-> id int unsigned 'auto_increment,->name varchar( 30),
->primary key(id)-> );
mysql> create table t6(
-> id int unsigned auto_increment primary key,->name varchar(30)
->);
》表索引:  索引作用:提高检索速度
1.主键索引（PRI） 建表时就有
增：primary key(id);
删：alter table t1 modify id int unsigned not null; 先删自增
       alter table t1 drop primary key; 再删索引
2.唯一索引（UNI）
增：alter table t1 add unique uni_name (name);
删：alter table t1 drop index uni_name;
3.普通索引（）
增：alter table t1 add index idx_name( name);
删：alter table t1 drop index idx_name;
把表打印结果以行来打印:  desc select *from t1 where id=4\G
批量删除表:  DROP TABLE`t1`, `t2` , `t3`, `t4`, `t5`, `t6`,`t7`, `t8`,`t9`, 'user`;
表名反引号作用: 可以有效的屏蔽关键字问题(表名和字段名不允许使用关键字)
修改数据表字段:
1.增
alter table t1 add sex tinyint not null; 在最后面添加
alter table t1 add sex tinyint not null after name; 在name后添加
alter table t1 add sex tinyint not null first; 在最前面添加
2.删
alert table t1 drop sex;
3.改
alter table t1 change name username varchar(30) not null; 改数据名
alter table t1 modify username varchar(50) not null;改数据
=-------------------------------------------------------------------------------
21:48 2022/9/2
数据库操作:
1.DDL  数据定义语言,create,drop,alter
2.DML  数据操作语言,insert,update,delete
3.DQL  数据查询语言,select
4.DCL  数据控制语言,grant, commit,rollback
数据表操作:
1.sql条件
1)数学运算符
+,-*,/ ,%
2)逻辑运算符
&&，ll，and，or,between...and,in 
3)比较运算符=,!=,>=,<=,>,<
2.增-insert
insert into user(username,password) values( 'user1 ' , '123');
3.删-delete
1)不改变自增顺序
delete from user where id=4;
select * from user where id in(1,2);
2)重置自增顺序
truncate user; 清空表数据
4.改-update
update user set password='456' where id=3;#只修改id=3
update user set password='456';#全部修改
5.查-select
select username from user;#查询所有行的username列数据
select * from user;#查询所有行的所有列数据
select * from user where id=5;#查看id=5的行的所有列数据

查询数据(DQL)-select:
1.选择特定的字段(多个用逗号隔开)
select id,name from user,I
2.给字段取别名-as
select id,name from user;====》
select id maoxian, name from user;
select id as maoxian,name from user;
3.distinct关键字的使用（获取除去重复项的数据）
select distinct age from user;
4.使用where条件进行查询
select * from user where id>=3 and id<=5;
5.查询空值null
select * from user where age is null;
select * from user where age is not null;
6.between and的使用方法
select * from user where id between 3 and 5;
7.in的使用方法
select * from user where id=1 or id=2 or id=10;
select* from user where id in(1,2,10);建议使用这个
8.like的使用方法
%匹配所有
_匹配一个字符
select * from user where name like "%mysq1%";
//%在前,name这一列的索引会失效
9.使用order by对查询结果排序
select * from user order by id asc;//默认就是升序,数字从小到大
select * from user order by id desc;//默认就是升序,数字从大到小
10.regexp正则检索
select * from user where username regexp 'php '; 包含php
select* from user where username regexp '^php' ; 以php开头
select * from user where username regexp 'php$ ';以php结尾
11.使用limit限定输出个数:
select * from user limit 3;
select * from user limit 3,5;
》mysql吊用函数:
连接函数concat()
select concat(username, ' -',class_id) from user;#把用户名和班号连接
随机数rand()
select * from user order by rand() limit 3; #随机输出三条数据
统计个数count()
select count(*) from user; #速度更更快  优化后语句
select count(id) from user;
求和sum()
select sum(id) from user; 对表中id求和
平均值avg()
select avg(id) from user;
最大值max()
select max(id) from user;
最小值min()
select min(id) from user;
group by分组聚合的使用:
select class id,count(*) from user group by class id;
select concat(class_id,'-','class') class,count(*) tot from user group by class_id;
---------------------------------------------------------------------------------------------------------------------
15:00 2022/9/3
》多表查询:
表与表关系:
1.有关系
2.没关系
有关系:
1.合并
2.分离
#一个表一个主体
#两个表是一对一关系，则可以合并
表与表有哪些关系:
1.一对一
2.一对多
3.多对多

1.晋通多表查询 
class表:
create table class(
id int unsigned not null auto increment, 
name varchar(30) not null, 
primary key(id)
); 
user表:
create table user(
id int unsigned not null auto increment. 
username varchar(50) not null, 
password varchar(50) not null, 
class_id int unsigned not null,
primary key(id));
需求:请打印出每个学员的姓名和班级?
mysql> select user.username,class.name from user,class where user.class_id=class.id;
2.嵌套查询
select * from user where id in(select max(id) from user);
3.链接查询
需求:把所有班的总人数统计出来，前提是有些班没有人?
mysql> select class.name , count(user.id) from class left join user on class.id=user.class_id group by class.id;
需求:把所有班的总人数统计出来，前提是有些班没有人?注:人数为e的则打印出"无"!
mysql> select class.name,if(count(user.id) ,count(user.id),'无') from class leftjoin user on class.id=user.class_id group by class.id;
if解析：如果count(user.id)为真则输出count(user.id)否则输出无
需求:用户表，里面有很多用户，有一列是成绩，请统计这张表中及格人数和不及格人数，请用一条sql语句实现?
select (select count(*) from user where score>=60) yes,(select count(*) fromuser w here score<60) no;
select sum(if(score>=60,1,0)）及格, sum(if(score<60,1,0)）不及格 from user;
20:27 2022/9/4
左链接:
把左边的表数据全输出!
select class.name,if(count(user.id),count(user.id),'无') from class left join useron class.id=user.class_id group by class.id;
右链接:
把右边的表数据全部输出!
select class.name,if(count(user.id),count(user.id),'无') from user right join classon class.id=user.class_id group by class.id;
内链接:
select class.name, count(user.id) from class inner join user on class.id=user.class_
id group by class.id;
#完全等于普通多表查询，必须是符合条件的多个表的数据才会显示!
having 用于分组聚合后设置查询条件，此时where不能用，需用having。
把班号小于等于2的班号打印出来:
mysql> select class_id from user group by class_id having class_id<=2;
------------------------------------------------------------------------------------------
0:15 2022/9/6
》PDO数据库操作（PHP data object）php数据对象
1.PDO class #PDO类
query();执行sql语句
exec();执行sql语句，查询数据库数据
prepare();设置预处理函数
2.PDOStatement class #PDO预处理类
fetchAll()从结果集中获取全部数据
fetch（）从结果集中获取一条数据，适用于只有一条数据的结果集
fetchColumn();获取结果集中下一行指定列的值
execute(); 执行预处理对象，返回值为ture/fault
rowCount();获取影响行数
bindvalue（）给预处理绑值
3.PDOException class #PDO异常类

实例：PDO获取表数据
<?php
#连接数据库
$pdo=new PDO( 'mysql:host=localhost;dbname=sdn' , 'root' , '123');
$sql="select * from user";
$smt=$pdo->query($sql);查询数据库数据
#返回关联数组
$rows=$smt->fetchAll(PDO::FETCH_ASSOC);
#返回索引数组
#$rows=$smt->fetchAll(PDO ::FETCH_NUM);
#返回混合数组
#$rows=$smt->fetchAll(PDO::FETCH_BOTH);
#返回对象
#$rows=$smt->fetchAll(PDO::FETCH_OBJ);
echo"<pre> ";
print_r( $rows);
echo"</ pre>" ;
?>
数据库数据遍历展示：
#返回关联数组
$rows=$smt->fetchAl1( PDO ::FETCH_ASSOC);
foreach($rows as $row){
echo '<tr>';
echo "<td>{$row[ 'id ' ]}</td>";
echo "<td>{$row [ 'username ' ]}</td>";
echo "<td>{$row [ 'password' ]}</td>";
echo '</tr>';
}
pdo插入数据:
$sql="insert into user(username, password) values( 'user9' , '123')";
#pdo删除数据:
#$sql="delete from user where id>=10";
#修改数据
#$sql="update user set password='456' where id=9";
echo $pdo->exec($sql);exec()返回影响行数。
//设置客户端字符集为utf-8
$pdo->exec( 'set names utf8');
》预处理函数
$sql="insert into user(username, password) values(罗勇, '123 ')";
$smt=$pdo->prepare($sql);
if($smt->execute()){
$tot=$smt- >rowCount(); smt获取影响行数
echo '数据操作成功，成功删除'.$tot.'行!';
}else{
echo '数据操作失败!';
}
》bindvalue给预处理绑值（其中1指第一个？，5指要绑定的值）
$sql="select* from user where id=?";
$smt=$pdo->prepare($sql);
$smt- >bindvalue(1,5);



























